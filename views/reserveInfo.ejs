<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link  rel = "stylesheet" href = "stylesheets/reserveInfo.css">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href = "/ExpertFilter">예약하기</a></li>
                <li><a href = "/reserveInfo">예약정보</a></li>
                <li><a href = "/mypage">회원정보</a></li>
            </ul>
        </nav>
    </header>
    <div class = "filter">
        <form id = "button-form">
            <button type="button" class="pastReserve">이전예약</button>
            <button type="button" class="futureReserve">상담 예정 예약</button>
        </form>
    </div>

    <div class="reservation-info">
        <table>
            <thead>
                <tr>
                    <th>날짜</th>
                    <th>시간</th>
                    <th>고객이름</th>
                    <th>전문가이름</th>
                    <th>리뷰쓰기</th>
                </tr>
            </thead>
            <tbody id="reservationTableBody">
                <!-- 이곳에 JavaScript를 통해 데이터를 동적으로 추가. -->
            </tbody>
        </table>
    </div>
    <div id="review-form" style="display: none;">

        <form id="review-form-data">
            <input type="hidden" id="selected-reservation-id" value="" />
            <label for="review-message">리뷰 메시지:</label><br>
            <textarea id="review-message" name="review-message" rows="4" cols="50"></textarea><br>
            <input type="number" id="review-rating" name="review-rating" min="1" max="5"><br>
            <input type="submit" value="리뷰 제출">
        </form>
    </div>


    <script>
        function fetchReservations() {
            fetch('/api/reservations')
                .then(response => response.json())
                .then(reservations => {
                    const reservationTableBody = document.getElementById('reservationTableBody');

                    reservations.forEach((reservation, index) => {
                        const row = document.createElement('tr');

                        row.innerHTML = `
                            <td>${reservation.date}</td>
                            <td>${reservation.time}</td>
                            <td>${reservation.customer}</td>
                            <td>${reservation.expert}</td>
                            <td>
                                <input type="radio" name="selectedReservation" value="${index}" />
                            </td>
                        `;

                        reservationTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching reservations:', error));
        }

        window.addEventListener('load', fetchReservations);

        const buttonForm = document.getElementById('button-form');
        const pastReserve = document.querySelector('.pastReserve');
        const futureReserve = document.querySelector('.futureReserve');

        pastReserve.addEventListener('click', function() {
            fetch('/api/pastReservations')
                .then(response => response.json())
                .then(pastReservations => {
                    const reservationTableBody = document.getElementById('reservationTableBody');
                    reservationTableBody.innerHTML = '';

                    pastReservations.forEach(reservation => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${reservation.date}</td>
                            <td>${reservation.time}</td>
                            <td>${reservation.customer}</td>
                            <td>${reservation.expert}</td>
                            <td>
                                <input type="radio" name="selectedReservation" value="${reservation.id}" />
                            </td>
                        `;
                        reservationTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching past reservations:', error));
        });

        futureReserve.addEventListener('click', function() {
            fetch('/api/futureReservations')
                .then(response => response.json())
                .then(futureReservations => {
                    const reservationTableBody = document.getElementById('reservationTableBody');
                    reservationTableBody.innerHTML = '';

                    futureReservations.forEach(reservation => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${reservation.date}</td>
                            <td>${reservation.time}</td>
                            <td>${reservation.customer}</td>
                            <td>${reservation.expert}</td>
                            <td>
                                <input type="radio" name="selectedReservation" value="${reservation.id}" />
                            </td>
                        `;
                        reservationTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching future reservations:', error));
        });









        const radioButtons = document.querySelectorAll('input[type="radio"]');
        const reviewForm = document.getElementById('review-form');
        const selectedReservationId = document.getElementById('selected-reservation-id');
        const reviewFormSubmit = document.getElementById('review-form-data');
    
        radioButtons.forEach(radio => {
            radio.addEventListener('change', (event) => {
                const selectedId = event.target.value;
                selectedReservationId.value = selectedId;
    
                reviewForm.style.display = 'block';
            });
        });
    


    

        //리뷰제출 함수.
        function submitReview(ID, reviewMessage) {
            // 서버로 전송할 데이터 객체 생성
            const data = {
                id: ID,
                review: reviewMessage
            };
        
            // 서버에 POST 요청 보내기
            fetch('/api/submitReview', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok.');
                }
                // 여기에서 성공적으로 리뷰가 제출되었을 때의 로직을 추가할 수 있습니다.
                console.log('Review submitted successfully!');
                // 성공적으로 리뷰가 제출되었을 때 클라이언트의 동작을 설정할 수 있습니다.
            })
            .catch(error => {
                console.error('There was a problem submitting the review:', error);
                // 리뷰 제출에 실패했을 때의 처리를 설정할 수 있습니다.
            });
        }
        

        reviewFormSubmit.addEventListener('submit', (e) => {
            e.preventDefault();
            const reviewMessage = document.getElementById('review-message').value;
            const reviewRating = document.getElementById('review-rating').value;
            const selectedId = id.value;
            
            submitReview(selectedId, reviewMessage, reviewRating);

            // 리뷰를 전송한 후 폼을 숨깁니다.
            reviewForm.style.display = 'none';
        });
    </script>

</body>
</html>